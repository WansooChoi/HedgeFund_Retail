group_by(PERMNO) %>%
mutate(x = PRC/lag(PRC)-1, y = which(DATE == event_date)-1:n(), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x, TRUE ~ NA_real_)) %>%
select(-x , -y)
MilliCRSP13D <- MilliCRSP13D %>%
group_by(PERMNO) %>%
mutate(x = PRC/lag(PRC)-1, y = which(DATE == event_date)-1:n(), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x, TRUE ~ NA_real_))
MilliCRSP13D |> group_by(PERMNO) |> mutate(x = PRC/lag(PRC)-1, y = which(DATE == event_date)-1:n(), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x, TRUE ~ NA_real_)) |> select(-x , -y)
MilliCRSP13D |> group_by(PERMNO) |> mutate(x = PRC/lag(PRC)-1, y = which(DATE == event_date)-1:n(), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x, TRUE ~ NA_real_)) |> select(-x , -y)
MilliCRSP13D |> group_by(PERMNO) |> mutate(x = PRC/lag(PRC)-1, y = which(DATE == event_date)-1:n(), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x, TRUE ~ NA_real_))
length(MilliCRSP13D$DATE=="NA")
length(MilliCRSP13D$DATE=='NA')
length(MilliCRSP13D$DATE='NA')
n_distinct(d13$form_type)
sapply(d13, n_distinct)
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
sum(is.na(MilliCRSP13D$DATE))
sum(is.na(MilliCRSP13D$PERMNO))
sum(is.na(c(MilliCRSP13D$DATE,MilliCRSP13D$PERMNO)))
sapply(MilliCRSP13D,is.na)
sapply(MilliCRSP13D,sum(is.na)
sapply(MilliCRSP13D,sum(is.na))
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
sapply(MilliCRSP13D,sum(is.na))
sum(is.na(MilliCRSP13D))
sapply(MilliCRSP13D, function(y) sum(length(which(is.na(y)))))
fread("C:/Users/user/Desktop/Example.csv")
example<-fread("C:/Users/user/Desktop/Example.csv")
View(example)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
library(dplyr)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example |> group_by(ID) |> mutate( ret = Price/lag(Price) - 1 ,
dd = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ ret , TRUE ~ NA_real_)) |> select(-ret , -dd)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example$Date<-as.character(example$Date)
example<-example%>%
mutate(Date=as.Date(Date, "%Y%m%d"))
example$EventDate<-as.character(example$EventDate)
example<-example%>%
mutate(EventDate=as.Date(EventDate, "%Y%m%d"))
example<-fread("C:/Users/user/Desktop/Example.csv")
example$Date<-as.character(example$Date)
example<-example%>%
mutate(Date=as.Date(Date, "%Y%m%d"))
example<-fread("C:/Users/user/Desktop/Example.csv")
example<-example%>%
mutate(Date=as.Date(Date, "%Y%m%d"))
example$Date<-as.character(example$Date)
example$EventDate<-as.character(example$EventDate)
example<-fread("C:/Users/user/Desktop/Example.csv")
example<-fread("C:/Users/user/Desktop/Example.csv")
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example$Date<-as.character(example$Date)
example$EventDate<-as.character(example$EventDate)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example<-example%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
example<-example%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
example<-fread("C:/Users/user/Desktop/Example.csv")
example$Date<-as.character(example$Date)
example<-example%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
example<-fread("C:/Users/user/Desktop/Example.csv")
example$Date<-as.character(example$Date)
example<-example%>%
mutate(Date=as.Date(Date, "%Y%m%d"))
example$Date<-as.character(example$Date)
example$Date<-as.character(example$Date)
example$EventDate<-as.character(example$EventDate)
example<-example%>%
group_by(ID)%>%
mutate(BHret=ifelse(DATE==event_date,ifelse(Price>0,"Winner","Loser"),"NA"))
example<-example%>%
group_by(ID)%>%
mutate(BHret=ifelse(Date==EventDate,ifelse(Price>0,"Winner","Loser"),"NA"))
example<-fread("C:/Users/user/Desktop/Example.csv")
example$Date<-as.character(example$Date)
example$EventDate<-as.character(example$EventDate)
example<-example%>%
group_by(ID)%>%
mutate(BHret=ifelse(Date==EventDate,ifelse(Price>0,"Winner","Loser"),"NA"))
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -1 , 1) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate), BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
example<- example %>%
group_by(ID) %>%
mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) %>%
select(-x , -y)
example<- example %>%
group_by(ID) %>%
mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) %>%
select(-x , -y)
example |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 , y = which(Date == EventDate) - 1:n() , BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |> select(-x , -y)
df<-fread("C:/Users/user/Desktop/Example.csv")
View(df)
df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
library(dplyr)
df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df)
df<-df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df)
df<-df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_)) |>
select(-x , -y)
####################################################################################################################
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(MilliCRSP13D)
df<-fread("C:/Users/user/Desktop/Example2.csv")
df2<-fread("C:/Users/user/Desktop/Example2.csv")
df3<-fread("C:/Users/user/Desktop/Example3.csv")
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df<-df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df<-fread("C:/Users/user/Desktop/Example.csv")
df<-df |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df2<-fread("C:/Users/user/Desktop/Example2.csv")
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -2 , 2) ~ x , TRUE ~ NA_real_))
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -1 , 1) ~ x , TRUE ~ NA_real_))
View(df2)
df2<-fread("C:/Users/user/Desktop/Example2.csv")
View(df2)
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -1 , 1) ~ x , TRUE ~ NA_real_))
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df2)
df2<-fread("C:/Users/user/Desktop/Example2.csv")
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df3<-fread("C:/Users/user/Desktop/Example3.csv")
df3<-df3 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df3)
####################################################################################################################
MilliCRSP13D |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
MilliCRSP13D2<-na.omit(MilliCRSP13D)
View(MilliCRSP13D2)
View(MilliCRSP13D)
MilliCRSP13D2<-subset(MilliCRSP13D,select=c(PERMNO, DATE, PRC, event_date))
####################################################################################################################
MilliCRSP13D2 |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(MilliCRSP13D2)
View(df2)
View(df3)
View(df2)
df4<-fread("C:/Users/user/Desktop/Example4.csv")
df4<-df4 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df4)
####################################################################################################################
MilliCRSP13D2 |> group_by(PERMNO) |> mutate( x = PRC/lag(PRC) - 1 ,
y = which(DATE == event_date) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
df2<-fread("C:/Users/user/Desktop/Example2.csv")
View(df2)
df2<-df2 |> group_by(ID) |> mutate( x = Price/lag(Price) - 1 ,
y = which(Date == EventDate) - 1:n() ,
BuyHoldReturn = case_when(between(y , -5 , 5) ~ x , TRUE ~ NA_real_))
View(df2)
View(df2)
# setup
library(plm)
library(dplyr)
#library(plyr) do not use plyr with dplyr
library(tidyverse)
library(readr)
library(data.table)
library(DataCombine)
library(functional)
library(stringr)
library(slider)
library(ggplot2)
library(zoo)
library(sandwich)
library(lubridate)
require(foreign)
require(lmtest)
library(sandwich)
library(epiDisplay)
library(vtable)
library(skimr)
#library(scales)
#ok github good to go.
#I will use github desk top instead of git or git in r because
#github desktop is easiest at this moment
library(data.table)
getwd()
d13<-fread("C:/Users/user/Desktop/WhaleWisdom/13D 2010-2021.csv")
MilliCRSP<-fread("C:/Users/user/Desktop/WhaleWisdom/MilliCRSP 2010-2021.csv")
########################################################################################
#colnames(d13)[21]<-"filer name"
names(d13)[names(d13) == 'cusip_number'] <- 'CUSIP'
d13<- d13%>%
mutate(CUSIP=substr(CUSIP,1,8))
head(d13)
d13<-subset(d13,select=c(stock_id, filer_id, form_type, CUSIP, filed_as_of_date, event_date, HedgeFund))
#GET MARKET CAP FROM MILLI
MilliCRSP<-MilliCRSP%>%
group_by(PERMNO)%>%
mutate(MarketCap=PRC*SHROUT)
#use only things we need
MilliCRSP<-subset(MilliCRSP,select=c(PERMNO, DATE, TICKER, PRC, RET, CUSIP, MarketCap, mroibtrd, mroibvol))
#MERGE 13D AND MILLICRSP
d13<-d13%>%
mutate(DATE=format(d13$event_date, "%Y%m%d"))
#make it numeric values
d13<-d13%>%
mutate(DATE=as.numeric(d13$DATE))
#BETTER TO USE JOIN FUNCTIONS FROM DPLYR THAN THE MERGE.
MilliCRSP13D<-left_join(MilliCRSP,d13,by=c('CUSIP','DATE'))
#WOW THIS IS WAY MUCH FASTER THAN MERGE FUNCTION !!!!
head(MilliCRSP13D)
n_distinct(MilliCRSP13D$CUSIP)
n_distinct(MilliCRSP$CUSIP)
n_distinct(d13$CUSIP)
#Frequency Table
tab1(MilliCRSP13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#only 16204/10912193 observations is announced in 13D by non-hedgefunds and 7661/10912193 is announced in 13D by hedgefunds
#makes sense because 13D announcement is annual.
#Make a list of firms that are reported 13D (both hedgefund and non-hedgefund)
Announced13D<-subset(MilliCRSP13D, HedgeFund=="Yes" | HedgeFund=="No")
tab1(Announced13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#good.
#want to calculate buy and hold return -20 ~ +20 days from event date.
MilliCRSP13D$DATE<-as.character(MilliCRSP13D$DATE)
MilliCRSP13D<-MilliCRSP13D%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
MilliCRSP13D<-MilliCRSP13D%>%
mutate(event_date=as.Date(event_date, "%Y%m%d"))
#see how many NA we have.
sapply(MilliCRSP13D, function(y) sum(length(which(is.na(y)))))
d13<-fread("C:/Users/user/Desktop/WhaleWisdom/13D 2010-2021.csv")
library(data.table)
d13<-fread("C:/Users/user/Desktop/WhaleWisdom/13D 2010-2021.csv")
# setup
library(plm)
library(dplyr)
#library(plyr) do not use plyr with dplyr
library(tidyverse)
library(readr)
library(data.table)
library(DataCombine)
library(functional)
library(stringr)
library(slider)
library(ggplot2)
library(zoo)
library(sandwich)
library(lubridate)
require(foreign)
require(lmtest)
library(sandwich)
library(epiDisplay)
library(vtable)
library(skimr)
#library(scales)
#ok github good to go.
#I will use github desk top instead of git or git in r because
#github desktop is easiest at this moment
d13<-fread("C:/Users/user/Desktop/WhaleWisdom/13D 2010-2021.csv")
MilliCRSP<-fread("C:/Users/user/Desktop/WhaleWisdom/MilliCRSP 2010-2021.csv")
########################################################################################
#colnames(d13)[21]<-"filer name"
names(d13)[names(d13) == 'cusip_number'] <- 'CUSIP'
d13<- d13%>%
mutate(CUSIP=substr(CUSIP,1,8))
head(d13)
d13<-subset(d13,select=c(stock_id, filer_id, form_type, CUSIP, filed_as_of_date, event_date, HedgeFund))
#GET MARKET CAP FROM MILLI
MilliCRSP<-MilliCRSP%>%
group_by(PERMNO)%>%
mutate(MarketCap=PRC*SHROUT)
#use only things we need
MilliCRSP<-subset(MilliCRSP,select=c(PERMNO, DATE, TICKER, PRC, RET, CUSIP, MarketCap, mroibtrd, mroibvol))
#MERGE 13D AND MILLICRSP
d13<-d13%>%
mutate(DATE=format(d13$event_date, "%Y%m%d"))
#make it numeric values
d13<-d13%>%
mutate(DATE=as.numeric(d13$DATE))
#BETTER TO USE JOIN FUNCTIONS FROM DPLYR THAN THE MERGE.
MilliCRSP13D<-left_join(MilliCRSP,d13,by=c('CUSIP','DATE'))
#WOW THIS IS WAY MUCH FASTER THAN MERGE FUNCTION !!!!
head(MilliCRSP13D)
n_distinct(MilliCRSP13D$CUSIP)
n_distinct(MilliCRSP$CUSIP)
n_distinct(d13$CUSIP)
#Frequency Table
tab1(MilliCRSP13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#only 16204/10912193 observations is announced in 13D by non-hedgefunds and 7661/10912193 is announced in 13D by hedgefunds
#makes sense because 13D announcement is annual.
#Make a list of firms that are reported 13D (both hedgefund and non-hedgefund)
Announced13D<-subset(MilliCRSP13D, HedgeFund=="Yes" | HedgeFund=="No")
tab1(Announced13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#good.
#want to calculate buy and hold return -20 ~ +20 days from event date.
MilliCRSP13D$DATE<-as.character(MilliCRSP13D$DATE)
MilliCRSP13D<-MilliCRSP13D%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
MilliCRSP13D<-MilliCRSP13D%>%
mutate(event_date=as.Date(event_date, "%Y%m%d"))
#see how many NA we have.
sapply(MilliCRSP13D, function(y) sum(length(which(is.na(y)))))
####################################################################################################################
# ensure Date and EventDate are Date columns
MilliCRSP13D <- MilliCRSP13D %>% mutate(across(c(DATE,event_date), ~as.Date(.x)))
left_join(
select(MilliCRSP13D,PERMNO, DATE),
inner_join(MilliCRSP13D %>% select(-event_date),filter(MilliCRSP13D,!is.na(event_date)) %>% distinct(PERMNO, event_date), by="PERMNO") %>%
filter(abs(event_date-DATE)<=6) %>%
group_by(PERMNO, event_date) %>%
mutate(BuyHoldReturn = c(NA,Price[-1]/Price[1]-1)),
by=c("PERMNO", "DATE")
)
df<-fread("C:/Users/user/Desktop/Example.csv")
View(df)
df <- df %>% mutate(across(c(Date,EventDate), ~as.Date(.x)))
left_join(
select(df,ID, Date),
inner_join(df %>% select(-EventDate),filter(df,!is.na(EventDate)) %>% distinct(ID, EventDate), by="ID") %>%
filter(abs(EventDate-Date)<=6) %>%
group_by(ID, EventDate) %>%
mutate(BuyHoldReturn = c(NA,Price[-1]/Price[1]-1)),
by=c("ID", "Date")
)
left_join(
select(df, "ID", "Date"),
inner_join(df %>% select(-EventDate),filter(df,!is.na(EventDate)) %>% distinct(ID, EventDate), by="ID") %>%
filter(abs(EventDate-Date)<=6) %>%
group_by(ID, EventDate) %>%
mutate(BuyHoldReturn = c(NA,Price[-1]/Price[1]-1)),
by=c("ID", "Date")
)
left_join(
select(df,ID, Date),
inner_join(df %>% select(-EventDate),filter(df,!is.na(EventDate)) %>% distinct(ID, EventDate), by="ID") %>%
filter(abs(EventDate-Date)<=6) %>%
group_by(ID, EventDate) %>%
mutate(BuyHoldReturn = c(NA,Price[-1]/Price[1]-1)),
by=c("ID", "Date")
)
?select
setDT(df)
df[,(c("Date", "EventDate")):=lapply(.SD, as.Date), .SDcols=c("Date", "EventDate")]
df[,!c("EventDate")][unique(df[!is.na(EventDate), .(ID, EventDate)]), on="ID", allow.cartesian=T][
abs(EventDate-Date)<=6][,BuyHoldReturn:=c(NA,Price[-1]/Price[1]-1), .(ID,EventDate)][
df[,.(ID,Date)], on=.(ID,Date)
]
setDT(df)
df[,(c("Date", "EventDate")):=lapply(.SD, as.Date), .SDcols=c("Date", "EventDate")]
df<-df[,!c("EventDate")][unique(df[!is.na(EventDate), .(ID, EventDate)]), on="ID", allow.cartesian=T][
abs(EventDate-Date)<=6][,BuyHoldReturn:=c(NA,Price[-1]/Price[1]-1), .(ID,EventDate)][
df[,.(ID,Date)], on=.(ID,Date)
]
View(df)
setDT(MilliCRSP13D)
df[,(c("DATE", "event_date")):=lapply(.SD, as.Date), .SDcols=c("DATE", "event_date")]
setDT(MilliCRSP13D)
MilliCRSP13D[,(c("DATE", "event_date")):=lapply(.SD, as.Date), .SDcols=c("DATE", "event_date")]
MilliCRSP13D<-MilliCRSP13D[,!c("event_date")][unique(MilliCRSP13D[!is.na(event_date), .(PERMNO, event_date)]), on="PERMNO", allow.cartesian=T][
abs(event_date-DATE)<=6][,BuyHoldReturn:=c(NA,Price[-1]/Price[1]-1), .(PERMNO)][
MilliCRSP13D[,.(PERMNO,DATE)], on=.(PERMNO,DATE)]
MilliCRSP13D<-MilliCRSP13D[,!c("event_date")][unique(MilliCRSP13D[!is.na(event_date), .(PERMNO, event_date)]), on="PERMNO", allow.cartesian=T][
abs(event_date-DATE)<=6][,BuyHoldReturn:=c(NA,PRC[-1]/PRC[1]-1), .(PERMNO)][
MilliCRSP13D[,.(PERMNO,DATE)], on=.(PERMNO,DATE)]
View(MilliCRSP13D)
MilliCRSP13D<-MilliCRSP13D[,!c("event_date")][unique(MilliCRSP13D[!is.na(event_date), .(PERMNO, event_date)]), on="PERMNO", allow.cartesian=T][
abs(event_date-DATE)<=20][,BuyHoldReturn:=c(NA,PRC[-1]/PRC[1]-1), .(PERMNO)][
MilliCRSP13D[,.(PERMNO,DATE)], on=.(PERMNO,DATE)]
View(MilliCRSP13D)
# setup
library(plm)
library(dplyr)
#library(plyr) do not use plyr with dplyr
library(tidyverse)
library(readr)
library(data.table)
library(DataCombine)
library(functional)
library(stringr)
library(slider)
library(ggplot2)
library(zoo)
library(sandwich)
library(lubridate)
require(foreign)
require(lmtest)
library(sandwich)
library(epiDisplay)
library(vtable)
library(skimr)
#library(scales)
d13<-fread("C:/Users/user/Desktop/WhaleWisdom/13D 2010-2021.csv")
MilliCRSP<-fread("C:/Users/user/Desktop/WhaleWisdom/MilliCRSP 2010-2021.csv")
########################################################################################
#colnames(d13)[21]<-"filer name"
names(d13)[names(d13) == 'cusip_number'] <- 'CUSIP'
d13<- d13%>%
mutate(CUSIP=substr(CUSIP,1,8))
head(d13)
d13<-subset(d13,select=c(stock_id, filer_id, form_type, CUSIP, filed_as_of_date, event_date, HedgeFund))
#GET MARKET CAP FROM MILLI
MilliCRSP<-MilliCRSP%>%
group_by(PERMNO)%>%
mutate(MarketCap=PRC*SHROUT)
#use only things we need
MilliCRSP<-subset(MilliCRSP,select=c(PERMNO, DATE, TICKER, PRC, RET, CUSIP, MarketCap, mroibtrd, mroibvol))
#MERGE 13D AND MILLICRSP
d13<-d13%>%
mutate(DATE=format(d13$event_date, "%Y%m%d"))
#make it numeric values
d13<-d13%>%
mutate(DATE=as.numeric(d13$DATE))
#BETTER TO USE JOIN FUNCTIONS FROM DPLYR THAN THE MERGE.
MilliCRSP13D<-left_join(MilliCRSP,d13,by=c('CUSIP','DATE'))
head(MilliCRSP13D)
n_distinct(MilliCRSP13D$CUSIP)
n_distinct(MilliCRSP$CUSIP)
n_distinct(d13$CUSIP)
#Frequency Table
tab1(MilliCRSP13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#Make a list of firms that are reported 13D (both hedgefund and non-hedgefund)
Announced13D<-subset(MilliCRSP13D, HedgeFund=="Yes" | HedgeFund=="No")
tab1(Announced13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
#want to calculate buy and hold return -20 ~ +20 days from event date.
MilliCRSP13D$DATE<-as.character(MilliCRSP13D$DATE)
MilliCRSP13D<-MilliCRSP13D%>%
mutate(DATE=as.Date(DATE, "%Y%m%d"))
MilliCRSP13D<-MilliCRSP13D%>%
mutate(event_date=as.Date(event_date, "%Y%m%d"))
#see how data looks like when we only use 13D (first report) i.e. without 13D/A (amendment)
unique(MilliCRSP13D$form_type)
MilliCRSP13D_Only<-MilliCRSP13D[- grep("SC 13D/A", MilliCRSP13D$form_type),]
test<-MilliCRSP13D[MilliCRSP13D$form_type=="SC 13D",]
test <- test[!is.na(test$form_type),]
test<-MilliCRSP13D[MilliCRSP13D$form_type=="SC 13D",]
test <- test[!is.na(test$form_type),]
MilliCRSP13D_Only<-MilliCRSP13D[-MilliCRSP13D$form_type=="SC 13D/A"]
subset(MilliCRSP13D,!form_type== "SC 13D/A")
View(test)
test<-MilliCRSP13D[MilliCRSP13D$form_type=="SC 13D",]
View(MilliCRSP13D_Only)
#Frequency Table
tab1(MilliCRSP13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
tab1(Announced13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
tab1(Announced13D$HedgeFund, sort.group = "decreasing", cum.percent = TRUE)
View(Announced13D)
#see how data looks like when we only use 13D (first report) i.e. without 13D/A (amendment)
tab1(Announced13D$form_type, sort.group = "decreasing", cum.percent = TRUE)
#There are 4993 13D (first report) and 18872 13D/A (amendment report)
unique(MilliCRSP13D$form_type)
MilliCRSP13D_Only<-MilliCRSP13D[- grep("SC 13D/A", MilliCRSP13D$form_type),]
View(MilliCRSP13D_Only)
unique(MilliCRSP13D_Only$form_type)
test <- test[!is.na(MilliCRSP13D_Only$form_type),]
View(test)
gc()
